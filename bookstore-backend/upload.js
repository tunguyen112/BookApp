require('dotenv').config();
const cloudinary = require('cloudinary').v2;
const fs = require('fs');
const path = require('path');

// C·∫•u h√¨nh Cloudinary
cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET
});

// ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a ·∫£nh
const folderPath = path.join(__dirname, 'images');

// L·∫•y danh s√°ch file ·∫£nh trong th∆∞ m·ª•c
fs.readdir(folderPath, (err, files) => {
    if (err) {
        console.error("L·ªói khi ƒë·ªçc th∆∞ m·ª•c:", err);
        return;
    }

    // L·ªçc ch·ªâ l·∫•y file ·∫£nh (ƒë·ªãnh d·∫°ng .jpg, .png, .jpeg)
    const imageFiles = files.filter(file => /\.(jpg|jpeg|png)$/i.test(file));

    if (imageFiles.length === 0) {
        console.log("Kh√¥ng c√≥ ·∫£nh n√†o trong th∆∞ m·ª•c.");
        return;
    }

    // Upload t·ª´ng ·∫£nh l√™n Cloudinary
    imageFiles.forEach(file => {
        const filePath = path.join(folderPath, file);
        cloudinary.uploader.upload(filePath, { folder: "bookstore" })
            .then(result => {
                console.log(`‚úÖ ·∫¢nh ${file} ƒë√£ upload th√†nh c√¥ng!`);
                console.log("üìå URL ·∫£nh:", result.secure_url);
            })
            .catch(error => {
                console.error(`‚ùå L·ªói khi upload ·∫£nh ${file}:`, error);
            });
    });
});
